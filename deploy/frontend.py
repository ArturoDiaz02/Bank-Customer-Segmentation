import streamlit as st
import joblib
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from io import StringIO
import re
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer

from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import LabelEncoder, RobustScaler, StandardScaler
from backend import *

st.title("Bank Customer Segmentation - Model KMeans Prediction")


def main():
    tab1, tab2, tab3, tab4 = st.tabs(["Cargar Datos", "Evaluaci√≥n individual", "Informaci√≥n sobre los clusters", "Informaci√≥n del Datset"])

    with tab3:
        st.header("¬øCuales son los clusters?")
        st.image("./deploy/resources/clusters.png")
        st.image("./deploy/resources/scatterplot.png")
        st.write(
            "El algoritmo de agrupaci√≥n espectral ha dividido a los clientes en tres grupos distintos. ‚ú® El **primer** grupo est√° compuesto por aquellas personas que son din√°micas, es decir, que realizan muchas transacciones üí∏ y, por ende, tienen poco saldo en su cuenta. Adem√°s, est√° compuesto en su mayor√≠a por personas j√≥venes üåü y donde predominan las mujeres üë©‚Äçüíº. El segundo **grupo** son aquellas personas que deciden ahorrar m√°s dinero üí∞ y, por ende, no realizan muchas transacciones. Est√° compuesto en su mayor√≠a por hombres de avanzada edad üë¥ que tienen una mentalidad ahorradora. Por √∫ltimo, el **tercer** grupo est√° compuesto por aquellas personas que realizan m√°s transacciones que los del grupo 2 pero menos que los del grupo 1. Est√° compuesto por hombres y mujeres entre 30 y 50 a√±os üë®‚Äçüë©‚Äçüëß‚Äçüë¶. Esta es toda la informaci√≥n que se tiene de los clusters. üìä")
    with tab4:
        st.header("Columnas del Dataset")
        variable_list = [
            {"Variable": "TransactionID", "Descripci√≥n": "ID √∫nico por cada transacci√≥n realizada"},
            {"Variable": "CustomerID", "Descripci√≥n": "ID √∫nico de un cliente"},
            {"Variable": "CustomerDOB", "Descripci√≥n": "Fecha de nacimiento de cada cliente"},
            {"Variable": "CustLocation",
             "Descripci√≥n": "Localizaci√≥n de cada cliente, lugar donde se hizo la transacci√≥n"},
            {"Variable": "CustAccountBalance", "Descripci√≥n": "Cantidad de dinero en la cuenta de cada cliente"},
            {"Variable": "TransactionDate", "Descripci√≥n": "Fecha en la que realizo la transacci√≥n"},
            {"Variable": "CustGender", "Descripci√≥n": "Genero de cada cliente"},
            {"Variable": "TransactionTime", "Descripci√≥n": "Tiempo que un cliente tard√≥ en realizar una transacci√≥n"},
            {"Variable": "TransactionAmount (INR)", "Descripci√≥n": "Cantidad de dinero girado por cada transacci√≥n"}
        ]

        df_variables = pd.DataFrame(variable_list)
        st.write("Para predecir los datos de tu dataset, debe de estar compuesto de la siguiente manera")

        st.table(df_variables)

    with tab2:
        st.header("Ingresa los datos para predicir")
        fr = st.number_input("Ingresa la frecuencia")
        lc = st.text_input("Ingresa el nombre del cliente (En may√∫sculas)")
        gn = st.selectbox("Ingresa el g√©nero", ["Masculino", "Femenino"])
        bl = st.number_input("Ingresa el balance de la cuenta")
        tr = st.number_input("Ingresa la cantidad de transacciones")
        age = st.number_input("Ingresa la edad del cliente")

        if(st.button("Predecir")):

            if fr is None or lc or gn or bl is None or tr is None or age is None:
                st.write("Ingresa todos los datos")
                return         
            if lc:
                lc = np.array([lc])  # Convert lc to a 1-dimensional array
                lc = valueToEncoder(lc)
            model = joblib.load("./deploy/model.joblib")
            if gn == "Masculino":
                gn = 1
            else:
                gn = -1
            df = pd.DataFrame(
                [[fr, lc, gn, bl, tr, age]], columns=['Frequency', 'CustLocation', 'CustGender', 'CustAccountBalance', 'TransactionAmount', 'CustomerAge'])
            column_names = df.columns
            scaler = RobustScaler()
            scaler.fit(df)
            df = pd.DataFrame(scaler.transform(df), columns=column_names)
            predict = model.predict(df)
            st.write("Predicci√≥n: ", predict)
            st.write(numclustersTable(predict))


    with tab1:
        uploaded_file = st.file_uploader("Sube tu archivo CSV aqu√≠", type="csv")
        if uploaded_file is not None:
            st.write("Archivo subido correctamente, espere mientras transformamos los datos...")
            df = pd.read_csv(uploaded_file)
            df = dateConvertion(df)
            df = refactorDates(df)
            df = getCustomerAge(df)
            st.write("Creando la tabla RFM...")
            df = RFMTable(df)
            df = formatOutputInRecency(df)
            df = groupbby_month_RFM(df)
            df = replaceGenderforInt(df)
            df = dataToEncoder(df)
            column_names = df.columns
            scaler = RobustScaler()
            scaler.fit(df)
            df = pd.DataFrame(scaler.transform(df), columns=column_names)
            df = importance_columns(df)
            st.write(df)
            st.write("Datos procesados correctamente")
            if st.button("Predecir"):
                model = joblib.load("./deploy/model.joblib")
                predict = model.predict(df)
                st.write("Predicci√≥n: ", predict)
                st.write(numclustersTable(predict))

                predictions_df = pd.DataFrame(predict, columns=['Cluster'])
                merged_df = pd.concat([df, predictions_df], axis=1)
                df_aux = merged_df.drop(columns=['CustLocation', 'CustGender', 'Frequency'])

                categories = ['CustAccountBalance', 'TransactionAmount', "CustomerAge"]


                avg_values = df_aux.groupby('Cluster')[categories].mean()
                st.write(avg_values)
                st.write("Gr√°ficos de los clusters:")
                st.pyplot(scatterplot(df, predict, model))
                st.pyplot(radarchar(df, predict))


if __name__ == "__main__":
    main()
